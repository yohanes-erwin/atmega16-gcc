
lcd16x2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000272  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000272  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006e  0080006e  00000314  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cb8  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003d3  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000525  00000000  00000000  000014f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000278  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000433  00000000  00000000  00001c94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000059a  00000000  00000000  000020c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00002661  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1b 01 	call	0x236	; 0x236 <main>
  8a:	0c 94 37 01 	jmp	0x26e	; 0x26e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd16x2_toggle_e>:
  ******************************************************************************
  */
static void lcd16x2_toggle_e()
{
	// EN pin = HIGH
	LCD16X2_PORT_EN |= (1 << LCD16X2_PIN_EN);
  92:	ab 9a       	sbi	0x15, 3	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	00 c0       	rjmp	.+0      	; 0x96 <lcd16x2_toggle_e+0x4>
	// Pulse length in us
	_delay_us(LCD16X2_DELAY_ENABLE_PULSE);
	// EN pin = LOW
	LCD16X2_PORT_EN &= ~(1 << LCD16X2_PIN_EN);
  96:	ab 98       	cbi	0x15, 3	; 21
  98:	08 95       	ret

0000009a <lcd16x2_write>:
  *			RS = 0. Otherwise, RS = 1.
  * @retval	None
  ******************************************************************************
  */
static void lcd16x2_write(uint8_t data, uint8_t rs)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	d8 2f       	mov	r29, r24
	uint8_t data_bits_tmp;
	
	// Write mode (RW = 0)
	LCD16X2_PORT_RW &= ~(1 << LCD16X2_PIN_RW);
  a0:	aa 98       	cbi	0x15, 2	; 21
	
	if (rs)
  a2:	66 23       	and	r22, r22
  a4:	11 f0       	breq	.+4      	; 0xaa <lcd16x2_write+0x10>
		// Write data (RS = 1)
		LCD16X2_PORT_RS |= (1 << LCD16X2_PIN_RS);	
  a6:	97 9a       	sbi	0x12, 7	; 18
  a8:	01 c0       	rjmp	.+2      	; 0xac <lcd16x2_write+0x12>
	else		
		// Write instruction (RS = 0)
		LCD16X2_PORT_RS &= ~(1 << LCD16X2_PIN_RS);	
  aa:	97 98       	cbi	0x12, 7	; 18
		(&LCD16X2_PORT_D6 == &LCD16X2_PORT_D7) &&
		(LCD16X2_PIN_D4 == 4) && (LCD16X2_PIN_D5 == 5) &&
		(LCD16X2_PIN_D6 == 6) && (LCD16X2_PIN_D7 == 7))
	{
		// Configure all data pins as output	
		DDR(LCD16X2_PORT_D7) |= 0xF0;
  ac:	84 b3       	in	r24, 0x14	; 20
  ae:	80 6f       	ori	r24, 0xF0	; 240
  b0:	84 bb       	out	0x14, r24	; 20
		
		// Backup low nibble of LCD port
		data_bits_tmp = LCD16X2_PORT_D7 & 0x0F;
  b2:	c5 b3       	in	r28, 0x15	; 21
  b4:	cf 70       	andi	r28, 0x0F	; 15
		
		// Output high nibble first
		LCD16X2_PORT_D7 = (data & 0xF0) | data_bits_tmp;
  b6:	8d 2f       	mov	r24, r29
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	8c 2b       	or	r24, r28
  bc:	85 bb       	out	0x15, r24	; 21
		lcd16x2_toggle_e();
  be:	0e 94 49 00 	call	0x92	; 0x92 <lcd16x2_toggle_e>
		
		// Output low nibble
		LCD16X2_PORT_D7 = ((data << 4 ) & 0xF0) | data_bits_tmp;
  c2:	20 e1       	ldi	r18, 0x10	; 16
  c4:	d2 9f       	mul	r29, r18
  c6:	c0 01       	movw	r24, r0
  c8:	11 24       	eor	r1, r1
  ca:	8c 2b       	or	r24, r28
  cc:	85 bb       	out	0x15, r24	; 21
		lcd16x2_toggle_e();
  ce:	0e 94 49 00 	call	0x92	; 0x92 <lcd16x2_toggle_e>
		
		// All data pins high (inactive)
		LCD16X2_PORT_D7 = 0xF0 | data_bits_tmp;
  d2:	c0 6f       	ori	r28, 0xF0	; 240
  d4:	c5 bb       	out	0x15, r28	; 21
		LCD16X2_PORT_D4 |= (1 << LCD16X2_PIN_D4);
		LCD16X2_PORT_D5 |= (1 << LCD16X2_PIN_D5);
		LCD16X2_PORT_D6 |= (1 << LCD16X2_PIN_D6);
		LCD16X2_PORT_D7 |= (1 << LCD16X2_PIN_D7);
	}
}
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <lcd16x2_read>:
static uint8_t lcd16x2_read(uint8_t rs)
{
	uint8_t data = 0;
	
	// Read mode (RW = 1)
	LCD16X2_PORT_RW |= (1 << LCD16X2_PIN_RW);
  dc:	aa 9a       	sbi	0x15, 2	; 21
	
	if (rs)
  de:	88 23       	and	r24, r24
  e0:	11 f0       	breq	.+4      	; 0xe6 <lcd16x2_read+0xa>
		// Read data (RS = 1)
		LCD16X2_PORT_RS |= (1 << LCD16X2_PIN_RS);
  e2:	97 9a       	sbi	0x12, 7	; 18
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <lcd16x2_read+0xc>
	else
		// Read busy flag and DDRAM address (RS = 0)
		LCD16X2_PORT_RS &= ~(1 << LCD16X2_PIN_RS);
  e6:	97 98       	cbi	0x12, 7	; 18
		(&LCD16X2_PORT_D6 == &LCD16X2_PORT_D7) &&
		(LCD16X2_PIN_D4 == 4) && (LCD16X2_PIN_D5 == 5) &&
		(LCD16X2_PIN_D6 == 6) && (LCD16X2_PIN_D7 == 7))
	{
		// Configure all data pins as input
		DDR(LCD16X2_PORT_D7) &= 0x0F;
  e8:	84 b3       	in	r24, 0x14	; 20
  ea:	8f 70       	andi	r24, 0x0F	; 15
  ec:	84 bb       	out	0x14, r24	; 20
		
		// EN pin = HIGH
		LCD16X2_PORT_EN |= (1 << LCD16X2_PIN_EN);
  ee:	ab 9a       	sbi	0x15, 3	; 21
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <lcd16x2_read+0x16>
		// Pulse length in us
		_delay_us(LCD16X2_DELAY_ENABLE_PULSE);
		// Read high nibble first
		data = PIN(LCD16X2_PORT_D7) & 0xF0;		
  f2:	93 b3       	in	r25, 0x13	; 19
  f4:	90 7f       	andi	r25, 0xF0	; 240
		// EN pin = LOW
		LCD16X2_PORT_EN &= ~(1 << LCD16X2_PIN_EN);
  f6:	ab 98       	cbi	0x15, 3	; 21
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd16x2_read+0x1e>
		
		// EN pin LOW delay
		_delay_us(LCD16X2_DELAY_ENABLE_PULSE);
		
		// EN pin = HIGH
		LCD16X2_PORT_EN |= (1 << LCD16X2_PIN_EN);
  fa:	ab 9a       	sbi	0x15, 3	; 21
  fc:	00 c0       	rjmp	.+0      	; 0xfe <lcd16x2_read+0x22>
		// Pulse length in us
		_delay_us(LCD16X2_DELAY_ENABLE_PULSE);
		// Read low nibble
		data |= PIN(LCD16X2_PORT_D7) >> 4;
  fe:	83 b3       	in	r24, 0x13	; 19
		// EN pin = LOW
		LCD16X2_PORT_EN &= ~(1 << LCD16X2_PIN_EN);
 100:	ab 98       	cbi	0x15, 3	; 21
		// EN pin = HIGH
		LCD16X2_PORT_EN |= (1 << LCD16X2_PIN_EN);
		// Pulse length in us
		_delay_us(LCD16X2_DELAY_ENABLE_PULSE);
		// Read low nibble
		data |= PIN(LCD16X2_PORT_D7) >> 4;
 102:	82 95       	swap	r24
 104:	8f 70       	andi	r24, 0x0F	; 15
		// EN pin = LOW
		LCD16X2_PORT_EN &= ~(1 << LCD16X2_PIN_EN);
	}
	
	return data;
}
 106:	89 2b       	or	r24, r25
 108:	08 95       	ret

0000010a <lcd16x2_wait_busy>:
static uint8_t lcd16x2_wait_busy()
{
	register uint8_t tmp;
	
	// Wait until busy flag is cleared
	while ((tmp = lcd16x2_read(0)) & (LCD16X2_BUSY_FLAG));
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd16x2_read>
 110:	88 23       	and	r24, r24
 112:	dc f3       	brlt	.-10     	; 0x10a <lcd16x2_wait_busy>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd16x2_wait_busy+0xc>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd16x2_wait_busy+0xe>
	
	// Delay needed for address counter is updated after busy flag is cleared
	_delay_us(LCD16X2_DELAY_BUSY_FLAG);
	
	// Read and return address counter
	return lcd16x2_read(0);
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd16x2_read>
}
 11e:	08 95       	ret

00000120 <lcd16x2_write_command>:
  * @param	The LCD instructions set.
  * @retval	None
  ******************************************************************************
  */
void lcd16x2_write_command(uint8_t cmd)
{
 120:	cf 93       	push	r28
 122:	c8 2f       	mov	r28, r24
	lcd16x2_wait_busy();
 124:	0e 94 85 00 	call	0x10a	; 0x10a <lcd16x2_wait_busy>
	lcd16x2_write(cmd, 0);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	8c 2f       	mov	r24, r28
 12c:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd16x2_write>
}
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <lcd16x2_write_data>:
  * @param	Data which want to written to the LCD.
  * @retval	None
  ******************************************************************************
  */
void lcd16x2_write_data(uint8_t data)
{
 134:	cf 93       	push	r28
 136:	c8 2f       	mov	r28, r24
	lcd16x2_wait_busy();
 138:	0e 94 85 00 	call	0x10a	; 0x10a <lcd16x2_wait_busy>
	lcd16x2_write(data, 1);
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	8c 2f       	mov	r24, r28
 140:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd16x2_write>
}
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <lcd16x2_clrscr>:
  * @retval	None
  ******************************************************************************
  */
void lcd16x2_clrscr()
{
	lcd16x2_write_command(LCD16X2_CLEAR_DISPLAY);
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	0e 94 90 00 	call	0x120	; 0x120 <lcd16x2_write_command>
 14e:	08 95       	ret

00000150 <lcd16x2_entry_inc>:
  * @retval	None
  ******************************************************************************
  */
void lcd16x2_entry_inc()
{
	lcd16x2_write_command(LCD16X2_CHARACTER_ENTRY_MODE | LCD16X2_INCREMENT |
 150:	86 e0       	ldi	r24, 0x06	; 6
 152:	0e 94 90 00 	call	0x120	; 0x120 <lcd16x2_write_command>
 156:	08 95       	ret

00000158 <lcd16x2_init>:
  * 		LCD display and cursor attributes define in lcd16x2.h file.
  * @retval	None
  ******************************************************************************
  */
void lcd16x2_init(uint8_t disp_attr)
{
 158:	cf 93       	push	r28
 15a:	c8 2f       	mov	r28, r24
			 (&LCD16X2_PORT_D6 == &LCD16X2_PORT_D7) &&
			 (LCD16X2_PIN_D4 == 4) && (LCD16X2_PIN_D5 == 5) && 
			 (LCD16X2_PIN_D6 == 6) && (LCD16X2_PIN_D7 == 7))
	{
		/* LCD control lines on different port, but data lines on same port */
		DDR(LCD16X2_PORT_RS) |= (1 << LCD16X2_PIN_RS);
 15c:	8f 9a       	sbi	0x11, 7	; 17
		DDR(LCD16X2_PORT_RW) |= (1 << LCD16X2_PIN_RW);
 15e:	a2 9a       	sbi	0x14, 2	; 20
		DDR(LCD16X2_PORT_EN) |= (1 << LCD16X2_PIN_EN);
 160:	a3 9a       	sbi	0x14, 3	; 20
		DDR(LCD16X2_PORT_D7) |= 0xF0;
 162:	84 b3       	in	r24, 0x14	; 20
 164:	80 6f       	ori	r24, 0xF0	; 240
 166:	84 bb       	out	0x14, r24	; 20
 168:	8f e9       	ldi	r24, 0x9F	; 159
 16a:	9f e0       	ldi	r25, 0x0F	; 15
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd16x2_init+0x14>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd16x2_init+0x1a>
 172:	00 00       	nop

	// Delay power on 
	_delay_us(LCD16X2_DELAY_POWER_ON);
	
	// Initialize 8-bit mode first
	LCD16X2_PORT_D5 |= (1 << LCD16X2_PIN_D5);	// Function set
 174:	ad 9a       	sbi	0x15, 5	; 21
	LCD16X2_PORT_D4 |= (1 << LCD16X2_PIN_D4);	// 8-bit mode
 176:	ac 9a       	sbi	0x15, 4	; 21
	lcd16x2_toggle_e();
 178:	0e 94 49 00 	call	0x92	; 0x92 <lcd16x2_toggle_e>
 17c:	81 ee       	ldi	r24, 0xE1	; 225
 17e:	94 e0       	ldi	r25, 0x04	; 4
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd16x2_init+0x28>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd16x2_init+0x2e>
 186:	00 00       	nop
	// Delay, busy flag can't be checked here
	_delay_us(LCD16X2_DELAY_INIT);
	
	// Repeat last command
	lcd16x2_toggle_e();
 188:	0e 94 49 00 	call	0x92	; 0x92 <lcd16x2_toggle_e>
 18c:	95 e1       	ldi	r25, 0x15	; 21
 18e:	9a 95       	dec	r25
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd16x2_init+0x36>
 192:	00 00       	nop
	// Delay, busy flag can't be checked here
	_delay_us(LCD16X2_DELAY_INIT_REP);
	
	// Repeat last command for third time
	lcd16x2_toggle_e();
 194:	0e 94 49 00 	call	0x92	; 0x92 <lcd16x2_toggle_e>
 198:	85 e1       	ldi	r24, 0x15	; 21
 19a:	8a 95       	dec	r24
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd16x2_init+0x42>
 19e:	00 00       	nop
	// Delay, busy flag can't be checked here
	_delay_us(LCD16X2_DELAY_INIT_REP);
	
	// Initialize 4-bit mode
	LCD16X2_PORT_D5 |= (1 << LCD16X2_PIN_D5);	// Function set
 1a0:	ad 9a       	sbi	0x15, 5	; 21
	LCD16X2_PORT_D4 &= ~(1 << LCD16X2_PIN_D4);	// 4-bit mode
 1a2:	ac 98       	cbi	0x15, 4	; 21
	lcd16x2_toggle_e();
 1a4:	0e 94 49 00 	call	0x92	; 0x92 <lcd16x2_toggle_e>
 1a8:	95 e1       	ldi	r25, 0x15	; 21
 1aa:	9a 95       	dec	r25
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd16x2_init+0x52>
 1ae:	00 00       	nop
	_delay_us(LCD16X2_DELAY_INIT_4BIT);
	
	/* From now the LCD only accepts 4 bit I/O */
	
	// 4-bit interface, 2 lines, 5x7 dot format font
	lcd16x2_write_command(LCD16X2_FUNCTION_SET | LCD16X2_4BIT_INTERFACE | 
 1b0:	88 e2       	ldi	r24, 0x28	; 40
 1b2:	0e 94 90 00 	call	0x120	; 0x120 <lcd16x2_write_command>
		LCD16X2_2LINE_MODE | LCD16X2_5X7DOT_FORMAT);
	// Display off
	lcd16x2_write_command(LCD16X2_DISPLAY_CURSOR_ON_OFF | LCD16X2_DISPLAY_OFF);
 1b6:	88 e0       	ldi	r24, 0x08	; 8
 1b8:	0e 94 90 00 	call	0x120	; 0x120 <lcd16x2_write_command>
	// Clear screen
	lcd16x2_clrscr();
 1bc:	0e 94 a4 00 	call	0x148	; 0x148 <lcd16x2_clrscr>
	// Entry mode
	lcd16x2_entry_inc();
 1c0:	0e 94 a8 00 	call	0x150	; 0x150 <lcd16x2_entry_inc>
	// Display cursor on off
	display_cursor_on_off_control = disp_attr;
 1c4:	c0 93 6e 00 	sts	0x006E, r28
	lcd16x2_write_command(LCD16X2_DISPLAY_CURSOR_ON_OFF | 
 1c8:	8c 2f       	mov	r24, r28
 1ca:	88 60       	ori	r24, 0x08	; 8
 1cc:	0e 94 90 00 	call	0x120	; 0x120 <lcd16x2_write_command>
		display_cursor_on_off_control);
}
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <lcd16x2_putc>:
  * @param	Character that want to be displayed.
  * @retval	None
  ******************************************************************************
  */
void lcd16x2_putc(const char c)
{
 1d4:	cf 93       	push	r28
 1d6:	c8 2f       	mov	r28, r24
  * @retval	LCD cursor/ DDRAM address.
  ******************************************************************************
  */
uint8_t lcd16x2_getxy()
{
	return lcd16x2_wait_busy();
 1d8:	0e 94 85 00 	call	0x10a	; 0x10a <lcd16x2_wait_busy>
  */
void lcd16x2_putc(const char c)
{
	uint8_t pos = lcd16x2_getxy();

	if (c == '\n')
 1dc:	ca 30       	cpi	r28, 0x0A	; 10
 1de:	49 f4       	brne	.+18     	; 0x1f2 <lcd16x2_putc+0x1e>
	register uint8_t address_counter;
	
#if LCD16X2_LINES == 1
	address_counter = 0;
#elif LCD16X2_LINES == 2
	if (pos < LCD16X2_START_LINE_2)
 1e0:	80 34       	cpi	r24, 0x40	; 64
 1e2:	10 f4       	brcc	.+4      	; 0x1e8 <lcd16x2_putc+0x14>
		address_counter = LCD16X2_START_LINE_2;
 1e4:	80 e4       	ldi	r24, 0x40	; 64
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <lcd16x2_putc+0x16>
	else 
		address_counter = LCD16X2_START_LINE_1;
 1e8:	80 e0       	ldi	r24, 0x00	; 0
#endif

	lcd16x2_write_command(LCD16X2_SET_DDRAM_ADDRESS | address_counter);
 1ea:	80 68       	ori	r24, 0x80	; 128
 1ec:	0e 94 90 00 	call	0x120	; 0x120 <lcd16x2_write_command>
 1f0:	10 c0       	rjmp	.+32     	; 0x212 <lcd16x2_putc+0x3e>
#if LCD16X2_LINES == 1
		if (pos == (LCD16X2_START_LINE_1 + LCD16X2_DISP_LENGTH))
			lcd16x2_write(LCD16X2_SET_DDRAM_ADDRESS |
				LCD16X2_START_LINE_1, 0);
#elif LCD16X2_LINES == 2
		if (pos == (LCD16X2_START_LINE_1 + LCD16X2_DISP_LENGTH))
 1f2:	80 31       	cpi	r24, 0x10	; 16
 1f4:	29 f4       	brne	.+10     	; 0x200 <lcd16x2_putc+0x2c>
			lcd16x2_write(LCD16X2_SET_DDRAM_ADDRESS |
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	80 ec       	ldi	r24, 0xC0	; 192
 1fa:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd16x2_write>
 1fe:	06 c0       	rjmp	.+12     	; 0x20c <lcd16x2_putc+0x38>
				LCD16X2_START_LINE_2, 0);
		else if (pos == (LCD16X2_START_LINE_2 + LCD16X2_DISP_LENGTH))
 200:	80 35       	cpi	r24, 0x50	; 80
 202:	21 f4       	brne	.+8      	; 0x20c <lcd16x2_putc+0x38>
			lcd16x2_write(LCD16X2_SET_DDRAM_ADDRESS |
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd16x2_write>
				LCD16X2_START_LINE_1, 0);
#endif
		
		lcd16x2_write_data(c);
 20c:	8c 2f       	mov	r24, r28
 20e:	0e 94 9a 00 	call	0x134	; 0x134 <lcd16x2_write_data>
	}
}
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <lcd16x2_puts>:
  * @param	String that want to be displayed.
  * @retval	None
  ******************************************************************************
  */
void lcd16x2_puts(const char* s)
{
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
	register char c;

	while ((c = *s++)) {
 21a:	ec 01       	movw	r28, r24
 21c:	21 96       	adiw	r28, 0x01	; 1
 21e:	fc 01       	movw	r30, r24
 220:	80 81       	ld	r24, Z
 222:	88 23       	and	r24, r24
 224:	29 f0       	breq	.+10     	; 0x230 <lcd16x2_puts+0x1a>
		lcd16x2_putc(c);
 226:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd16x2_putc>
  */
void lcd16x2_puts(const char* s)
{
	register char c;

	while ((c = *s++)) {
 22a:	89 91       	ld	r24, Y+
 22c:	81 11       	cpse	r24, r1
 22e:	fb cf       	rjmp	.-10     	; 0x226 <lcd16x2_puts+0x10>
		lcd16x2_putc(c);
	}
}
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <main>:
#include "lcd16x2.h"

int main(void)
{
	// LCD initialization
	lcd16x2_init(LCD16X2_DISPLAY_ON_CURSOR_OFF_BLINK_OFF);
 236:	84 e0       	ldi	r24, 0x04	; 4
 238:	0e 94 ac 00 	call	0x158	; 0x158 <lcd16x2_init>
	
    while(1)
    {
        lcd16x2_puts("Hello, World!");
 23c:	80 e6       	ldi	r24, 0x60	; 96
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 0b 01 	call	0x216	; 0x216 <lcd16x2_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	2f ef       	ldi	r18, 0xFF	; 255
 246:	89 e6       	ldi	r24, 0x69	; 105
 248:	98 e1       	ldi	r25, 0x18	; 24
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	80 40       	sbci	r24, 0x00	; 0
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <main+0x14>
 252:	00 c0       	rjmp	.+0      	; 0x254 <main+0x1e>
 254:	00 00       	nop
		_delay_ms(500);
		lcd16x2_clrscr();
 256:	0e 94 a4 00 	call	0x148	; 0x148 <lcd16x2_clrscr>
 25a:	2f ef       	ldi	r18, 0xFF	; 255
 25c:	89 e6       	ldi	r24, 0x69	; 105
 25e:	98 e1       	ldi	r25, 0x18	; 24
 260:	21 50       	subi	r18, 0x01	; 1
 262:	80 40       	sbci	r24, 0x00	; 0
 264:	90 40       	sbci	r25, 0x00	; 0
 266:	e1 f7       	brne	.-8      	; 0x260 <main+0x2a>
 268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x34>
 26a:	00 00       	nop
 26c:	e7 cf       	rjmp	.-50     	; 0x23c <main+0x6>

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
